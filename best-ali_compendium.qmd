---
title: "Research compendium"
toc: true
toc-title: Programme
number-sections: true
format:
  html:
    embed-resources: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: show
    theme: united
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
```


:::{.callout-note}
## Objectif
L'objectif de cet exercice est de créer un _**research compendium**_, c.-à-d. un 
dossier de travail dont la structure est dérivée de celle d'un package `r fontawesome::fa_i("r-project")`.

Ce _**research compendium**_ pourra vous servir d'exemple pour vos futurs projets en écologie numérique.
:::

<br/>

# Préambule

Installez les packages `r fontawesome::fa_i("r-project")` `usethis` et `devtools` depuis le CRAN, ils sont utilisés par développeurs de packages R mais nous bien utiles pour construire notre compendium :

```{r}
# Installation de 'usethis' ----
install.packages("usethis")
install.packages("devtools")
```

# Projet RStudio

Créez un nouveau projet RStudio : `File > New Project > New Directory > New Project`

- Choisissez un nom pour votre projet : par ex., `first_compendium`
- Sélectionnez l'emplacement où le nouveau projet sera créé
- Décochez toutes les autres cases et validez


:::{.callout-caution}
## Bonne pratique
Toujours travailler dans un **Projet RStudio**. Cela présente l'avantage de simplifier les chemins d'accès aux fichiers, notamment avec le package `r fontawesome::fa_i("r-project")` [`here`](https://here.r-lib.org/) et sa fonction `here()`. Les chemins d'accès seront toujours construits par rapport au dossier contenant le fichier `.Rproj` (racine du projet). On parle de _chemin relatif_. N'utilisez **plus jamais** la fonction `setwd()`.
:::

<br />


# Ajout d'un make.R

Afin de garder une trace de la mise en place de l'architecture de notre compendium, nous allons créer un script `r fontawesome::fa_i("r-project")` à la racine du projet.

Nous l'appelerons, par convention, `make.R`. Celui-ci aura deux objectifs :

1. mettre en place le projet et

2. exécuter le projet. L'idée est de n'exécuter que ce script.

Créez un nouveau fichier `r fontawesome::fa_i("r-project")` à la racine du projet et nommez le `make.R`.


:::{.callout-caution}
## Bonne pratique
Bien que non essentiel, un fichier **`make.R`** placé à la racine du projet permet de facilement mettre en place le projet (installation et chargement des packages requis et des fonctions `r fontawesome::fa_i("r-project")`) et d'exécuter les différentes analyses de manière séquentielle (en sourçant les scripts `r fontawesome::fa_i("r-project")` qui appellent eux-même les fonctions `r fontawesome::fa_i("r-project")`). C'est la **porte d'entrée du projet**.
:::


<br />


# Fichier `DESCRIPTION`

Le fichier `DESCRIPTION` décrit les métadonnées du projet (titre, auteur, description, dépendances requises, etc.). C'est à la base un des éléments essentiels d'un package `r fontawesome::fa_i("r-project")`. Ici, nous allons le _détourner_ pour l'utiliser dans le cadre d'un compendium afin de bénéficier des outils de développement de packages `r fontawesome::fa_i("r-project")`.

Ajoutez cette commande à votre script `make.R`, N'oubliez pas de le sauvegarder ... Exécutez-le. Vous pouvez maintenant commenter cette ligne pour prévenir ses futures éxecutions.


```{r}
# Ajout d'un fichier DESCRIPTION ----
usethis::use_description(check_name = FALSE)
```

Comme vous le voyez, ce fichier a été pré-rempli avec vos informations personnelles.
Vous éditerez les champs `Title` et `Description` plus loin.


:::{.callout-caution}
## Bonne pratique
Toujours ajouter un fichier **`DESCRIPTION`** à la racine du projet. En plus de la description du projet, il permet de lister les packages dont le projet dépend (tags `Imports`, `Depends` et `Remotes`). Avec ce fichier, plus besoin d'utiliser les fonctions `install.packages()` et `library()`. Elles seront remplacées respectivement par `devtools::install_deps()` (ou `renv::install()`) et `devtools::load_all()`.
:::


<br />

# Choix d'une Licence

Tout matériel partagé en ligne doit disposé d'une licence qui décrit ce qu'il est
possible de faire avec. Ainsi, nous vous recommandons d'ajouter **dès le début du projet** une licence. Pour savoir quelle licence est la plus appropriée à votre projet, rendez-vous sur cette page : https://choosealicense.com/.

Ajoutez la licence [**Creative Commons 'by'**](https://creativecommons.org/licenses/by/4.0/) à votre projet :

```{r}
# Ajout d'une licence ----
usethis::use_ccby_license()
```

Notez qu'un nouveau fichier a été créé : `LICENSE.md`. Celui-ci détaille le contenu de la license choisie. Regardez aussi le contenu du fichier `DESCRIPTION` : la section `License` a été mise à jour.


:::{.callout-caution}
## Bonne pratique
Toujours ajouter une **`LICENSE`** à un projet qui sera rendu public. Visitez le site [**Choose a License**](https://choosealicense.com/appendix/) pour choisir la plus appropriée à votre projet.
:::

<br />

# Structure du Compendium

La prochaine étape consiste en la création de sous-répertoires, chacun ayant un rôle précis et permettant la separation physique des *données*, des *méthodes*, des *résultats* . Pour cela, utilisez la fonction `dir.create` disponible directement dans `r fontawesome::fa_i("r-project")`.


```{r}
# Ajout de sous-répertoires ----
dir.create("data")
dir.create("R")
dir.create("outputs")
dir.create("analyses")
dir.create("reports")
```

Observez le panneau de gestion des fichiers, votre compendium prend forme.

:::{.callout-caution}
## Bonne pratique
Un bon _**Research compendium**_ sera composé de différents sous-répertoires, chacun destiné à accueillir un certain type de fichier. Le dossier **`data/`** contiendra toutes les données brutes nécessaires au projet. Le dossier **`outputs/`** contiendra tous les résultats générés. Un dossier **`figures/`** pourra contenir toutes les figures produites par les analyses si le nombre de sorties est important. Le dossier **`R/`** ne contiendra que des fonctions `r fontawesome::fa_i("r-project")`. Le dossier **`analyses/`** contiendra des scripts `r fontawesome::fa_i("r-project")` qui appeleront les fonctions `r fontawesome::fa_i("r-project")` pour réaliser les analyses. Enfin le dossie **`reports`** contiendra les fichiers **quarto** `.qmd` des documents qui présenteront les résultats (mémoire, article, présentation). `Cette structure peut bien sûr être adaptée selon les besoins.
:::

<br />

# Ajout de code `r fontawesome::fa_i("r-project")`

Nous voilà enfin prêt à coder !

Le dépôt GitHub <https://github.com/rdatatoolbox/datarepo> contient les données que nous utiliserons tout au long de la formation. Celles-ci proviennent de deux bases de données : [PanTHERIA](https://esajournals.onlinelibrary.wiley.com/doi/10.1890/08-1494.1) et [WWF WildFinder](https://www.worldwildlife.org/pages/wildfinder-database). Lisez attentivement le [README](https://github.com/rdatatoolbox/datarepo) pour plus de détails.


<br />

## Fonctions `r fontawesome::fa_i("r-project")`

**Objectif : ** écrire 1, 2 ou 4 fonctions `r fontawesome::fa_i("r-project")`, qui vont permettre de télécharger les quatre fichiers de données hébergées sur le dépôt GitHub ci-dessus. Les fichiers seront enregistrés dans le dossier `data/` et le sous-dossier spécifique à leurs bases de données (`pantheria/` ou `wildfinder/`).

Utilisez la fonction [`usethis::use_r()`](https://usethis.r-lib.org/reference/use_r.html) pour créer le/les fichiers `.R` dans le dossier `R/`.

`r fontawesome::fa_i("lightbulb")` Utilisez les fonctions :
`dir.create()`, `here::here()` et `utils::download.file()`.


**Proposition de fonction** (essayer de ne pas regarder)


```{r code_folding=TRUE}
dl_pantheria_data <- function(overwrite = FALSE) {
  
  # Destination ---- 
  path <- here::here("data", "pantheria")
  
  # File name ----
  filename <- "PanTHERIA_1-0_WR05_Aug2008.txt"
  
  # GitHub URL ----
  url <- paste0("https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/",
                "data/pantheria/")
  
  if (file.exists(file.path(path, filename)) && !overwrite) {
    
    # Check if exists locally ----
    message("The filename already exists. Use 'overwrite = TRUE' to replace it")
    
  } else {
    
    # Create destination folder ----
    dir.create(path, showWarnings = FALSE, recursive = TRUE)
    
    # Download file ----
    path_file <- file.path(path, filename)
    utils::download.file(url = paste0(url, filename),
                         destfile = destination)
  }

  return(path_file) 
}
```


:::{.callout-caution}
## Bonne pratique
**Ecrivez des fonctions** : on parle de _Factorisation de code_. Cela rendra votre code plus clair et plus facilement réutilisable. Placez toujours vos fonctions `r fontawesome::fa_i("r-project")` dans le dossier **`R/`**. Si vous utilisez des fonctions de dépendances externes, priviligiez cette écriture : `package::fonction()`.
:::

<br />

## Documentation

Maintenant, documentez votre/vos fonctions. C'est **essentiel !** Pour cela,
le plus pratique est sûrement d'ajouter une entête [**`roxygen2`**](https://roxygen2.r-lib.org/articles/roxygen2.html) à vos fonctions ! Cette syntaxe permet de documenter efficacement toute fonction `r fontawesome::fa_i("r-project")`.

Cette entête devra contenir (a minima) un titre, une description de chaque argument et le retour de la fonction.


**Proposition de documentation** (essayer de ne pas regarder)


```{r code_folding=TRUE}
#' Download PanTHERIA dataset
#'
#' @description 
#' This function downloads the PanTHERIA dataset (text file) hosted on the 
#' GitHub repository <https://github.com/rdatatoolcallout/datarepo/>. The file
#' won't be downloaded if already exists locally (except if `overwrite = TRUE`).
#' The file `PanTHERIA_1-0_WR05_Aug2008.txt` will be stored in 
#' `data/pantheria/`. This folder will be created if required.
#' 
#' @param overwrite a `logical`. If `TRUE`, the file will be downloaded again 
#'   and the previous version will be erased.
#'
#' @return No return value.
#' 
#' @export

dl_pantheria_data <- function(overwrite = FALSE) { ... }
```


**Optionnel :** transpilez vos entêtes `roxygen2` en fichiers `.Rd`, seuls fichiers acceptés par `r fontawesome::fa_i("r-project")` pour documenter des fonctions. Ces fichiers `.Rd` seront stockés dans le dossier `man/`.

```{r}
# Génération de la doc ----
devtools::document()
```

L'aide de votre fonction est maintenant accessible via `?nom_fonction`.


:::{.callout-caution}
## Bonne pratique
<br/>
Pensez aux autres (et au vous du futur) : **documentez toujours** votre code. Un code sans documentation est inutile. Utilisez les entêtes **`roxygen2`** pour documenter vos fonctions, de simples commentaires pour documenter du code et des `README` pour tout le reste.
:::


<br />

## Ajout des dépendances

Nos fonctions contiennent des dépendances à deux packages externes : `utils` et `here`. Nous devons ajouter ces dépendances au fichier `DESCRIPTION`.

Augmentez le contenu du fichier `DESCRIPTION`. Par défaut, les packages requis sont listés sous le tag `Imports`. Ainsi, pour utiliser une fonction externe, il faudra l'appeler par `package::fonction()`.

`
Imports:
  here,
  utils
`

:::{.callout-caution}
## Bonne pratique
<br/>
Listez toujours les **packages requis dans le fichier `DESCRIPTION`**. Ainsi, vous centralisez la liste des packages requis en un seul endroit et vous pourrez utiliser les fonctions `devtools::install_deps()` et `devtools::load_all()`.
:::


<br />

# Chargement du projet

Maintenant que notre compendium contient les éléments clés d'un package `r fontawesome::fa_i("r-project")`, c.-à-d. un fichier `DESCRIPTION` et un répertoire `R/` (... qui ne contient que des définitions de fonctions), nous pouvons utiliser les outils de développement des packages `r fontawesome::fa_i("r-project")` pour réaliser les deux tâches suivantes.

1. Les packages requis peuvent être installés (ou mis à jour) à l'aide de la
fonction **`remotes::install_deps()`**. Pour être plus reproductible, vous pouvez désactiver les mises à jour en ajoutant l'argument `upgrade = "never"`. Cette fonction vient remplacer la fonction **`install.packages()`**. Elle va lire le fichier `DESCRIPTION` pour récupérer la liste des packages requis. Il est donc important d'utiliser régulièrement la fonction `rcompendium::add_dependencies(".")` pour tenir ce fichier à jour.

:::{.callout-tip} 
Si vous utlisez `renv` le méchanisme d'installation des packages utilisera aussi le fichier `DESCRIPTION` !
:::

2. Les fonctions `r fontawesome::fa_i("r-project")` stockées dans le dossier `R/` peuvent être chargées avec la fonction **`devtools::load_all()`**. Cette fonction vient remplacer la fonction **`source()`**.

:::{callout-warning}
Après chaque modification d'une fonction `r fontawesome::fa_i("r-project")`, n'oubliez pas d'exécuter la fonction **`devtools::load_all()`**.
:::

Essayez ces deux fonctions.


:::{.callout-caution}
## Bonne pratique
<br/>
Avec un fichier `DESCRIPTION` (listant les dépendances requises) et un dossier `R/`, vous pouvez utiliser les fonctions **`devtools::install_deps()`** (installation/mise à jour des dépendances) et **`devtools::load_all()`** (chargement du projet) au lieu de `install.packages()`, `library()` et `source()`.
:::


<br />


# Analyses

Jusqu'à présent, nous n'avons fait que définir des fonctions `r fontawesome::fa_i("r-project")`, mais nous ne les avons pas exécutées. Nous allons créer notre premier script `r fontawesome::fa_i("r-project")` dans le dossier `analyses/`. Celui-ci aura pour objectif d'appeler les fonctions `r fontawesome::fa_i("r-project")` définies précédemment pour télécharger les données.

Créez un nouveau script `r fontawesome::fa_i("r-project")` comme suit et éditez-le: 

```{r}
# Ajout d'un script R ----
utils::file.edit(here::here("analyses", "download-data.R"))
```


**Proposition de contenu** (essayer de ne pas regarder)


```{r code_folding=TRUE}
# Download project raw data
#
# This script will download the PanTHERIA and WWF WildFinder datasets. The
# four files will be stored in `data/`.
# 
# All functions used in the script have been developed for this project
# and can be found in the folder R/.
#
# Jane Doe <jane.doe@mail.me>

# Download PanTHERIA database ----

dl_pantheria_data(overwrite = FALSE)


# Download WWF WildFinder database ----

# ...
```


Finalement, ajoutez une ligne dans le fichier `make.R` qui sourcera ce script.
Utilisez les fonctions `source()` et `here::here()` pour cela.

Pour charger le projet et lancer les analyses, il suffit d'exécuter ce fichier `make.R`.


:::{.callout-caution}
## Bonne pratique
<br/>
Le dossier **`analyses/`** contient les scripts `r fontawesome::fa_i("r-project")` qui appellent les fonctions `r fontawesome::fa_i("r-project")`. Il peut être ignoré dans le cas de simples analyses. Le code de l'analyse devra alors se trouver dans le **`make.R`**. A contrario, dans le cas d'analyses complexes, n'hésitez pas à multiplier les scripts `r fontawesome::fa_i("r-project")` (plutôt que d'avoir un seul gros script).
:::

<br />

# Ajout d'un `README`

Plus tard, vous verrez comment envoyer ce projet sur GitHub. Pour l'instant, nous allons légèrement anticiper les cours suivants, et ajouter un `README` à notre compendium. Ce sera la **vitrine du projet**. Les rôles d'un `README` sont : 1) de présenter le projet, 2) d'expliquer son contenu, et 3) d'expliquer comment l'installer et l'utiliser.

Pour cela, vous allez ajouter un `README.md` (fichier `markdown`) à la racine de votre projet.

```
## :mortar_board: Research Compendium

This is an example **compendium** ...


### Content

This repository is structured as follows:

- [`data/`](https://github.com/rdatatoolcallout/practice1/tree/main/data):
  contains all raw data required to perform analyses

- [`analyses/`](https://github.com/rdatatoolcallout/practice1/tree/main/analyses/):
  contains R scripts to run each step of the workflow

- [`R/`](https://github.com/rdatatoolcallout/practice1/tree/main/R):
  contains R functions developed especially for this project

- [`DESCRIPTION`](https://github.com/rdatatoolcallout/practice1/tree/main/DESCRIPTION):
  contains project metadata (author, date, dependencies, etc.)

- [`make.R`](https://github.com/rdatatoolcallout/practice1/tree/main/make.R):
  main R script to run the entire project by calling each R script
  stored in the `analyses/` folder

### Usage

Open R/RStudio and run:

source("make.R")

### Notes

- All required packages, listed in the `DESCRIPTION` file, will be
  installed (if necessary)
- All required packages and R functions will be loaded

### How to cite

> Casajus N, Bonnici I, Dray S, Gimenez O, Guéry L, Guilhaumon F,
> Schiettekatte NMD & Siberchicot A (2023) Workshop FRB-CESAB & RT
> EcoStat: Reproducible Research in Computational Ecology. Zenodo.
> <http://doi.org/10.5281/zenodo.4262978>.
```



`r fontawesome::fa_i("warning")` N'oubliez pas aussi d'éditer les sections `Title` et `Description` du fichier `DESCRIPTION`.


:::{.callout-caution}
`r fontawesome::fa_i("lightbulb")` **Bonne pratique #11**
<br/>
Ajoutez un **`README`** à votre projet afin d'aider l'utilisateur à comprendre votre projet. 
:::


<br />

> **`r fontawesome::fa_i("thumbs-up")` Félicitation : votre research compendium est maintenant fonctionnel !**


<br />

# Bonus

Ecrivez une fonction `r fontawesome::fa_i("r-project")` qui va télécharger le fichier [`README.md`](https://raw.githubusercontent.com/rdatatoolcallout/datarepo/main/README.md) du dépôt <https://github.com/rdatatoolcallout/datarepo/> et enregistrez-le dossier `data/`. Vous ajouterez ainsi la description des données à votre projet (conservez uniquement la section **Data description**).


**Proposition de fonction** (essayer de ne pas regarder)


```{r code_folding=TRUE}
#' Download data description (README)
#'
#' @description 
#' This function downloads the `README.md` of the GitHub repository
#' <https://github.com/rdatatoolcallout/datarepo/> providing data description.
#' The file won't be downloaded if already exists locally (except if 
#' `overwrite = TRUE`).
#' The `README.md` will be stored in `data/`.
#' 
#' @param overwrite a logical. If `TRUE`, the file will be downloaded again and
#'   the previous version will be erased.
#'
#' @return No return value.
#' 
#' @export

dl_data_descr <- function(overwrite = FALSE) {
  
  # Destination location ---- 
  path <- here::here("data")
  
  # File name ----
  filename <- "README.md"
  
  # GitHub URL ----
  url <- "https://raw.githubusercontent.com/rdatatoolcallout/datarepo/main/"
  
  if (file.exists(file.path(path, filename)) && !overwrite) {
    
    # Check if exists locally ----
    message("The filename already exists. Use 'overwrite = TRUE' to replace it")
    
  } else {
    
    # Create destination folder ----
    dir.create(path, showWarnings = FALSE, recursive = TRUE)
    
    # Download file ----
    utils::download.file(url = paste0(url, filename),
                         destfile = file.path(path, filename))
  }

  invisible(NULL) 
}
```
